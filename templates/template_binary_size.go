package templates

// Complete template with all necessary functions
const BinarySizeTemplate = `// Code generated by bingen. DO NOT EDIT.

{{define "binarySizeScalarElement"}}
	
	{{if .IsCustomElementEncoder}}
	// VarVar {{.Var}}
		{{template "binarySizeElement" dict "Var"  .Var "Shape" .}}
	{{ else if .IsSlice  }}
				// {{.Name}} ({{.BinaryTag}}) - slice
				// ElementType: {{.ElementType}}
				// Type: {{ .TypeName }}
				{{template "binarySizeSlice" . }}
	{{else if .IsBasicType}}
			 {{if eq .ElementType "string"}}
				ptr := {{.PointerDeref}}{{.Var}}
				size += 2 + len([]byte(ptr))

			{{else if eq .ElementType "[]byte"}}
				ptr := {{.PointerDeref}}{{.Var}}
				size += 2 + len(ptr)

			{{else if or (eq .ElementType "uint64") (eq .ElementType "int64")   (eq .ElementType "int") (eq .ElementType "float64")}}
				size += 8

			{{else if or (eq .ElementType "uint32") (eq .ElementType "int32") (eq .ElementType "float32") (eq .ElementType "rune")}}
				size += 4

			{{else if or (eq .ElementType "uint16") (eq .ElementType "int16")}}
				size += 2

			{{else if or (eq .ElementType "uint8") (eq .ElementType "int8") (eq .ElementType "byte") (eq .ElementType "rune") (eq .ElementType "bool")}}
				size += 1

			{{else}}
				// Fallback estimate for custom or unknown pointer types
				size += 2 + 64
			{{end}}

	{{else if .IsPointer}}
		// ElementType: {{.ElementType}}
		{{if .Element}}
			// Element: {{.Element.IsBasicType}}
			{{template "binarySizeScalarElement" dict
							"Var" (printf "s.%s" .FieldName)
							"FieldName" .FieldName
							"ElementType" .Element.ElementType
							"TypeName" .Element.TypeName
							"IsPointer" .Element.IsPointer
							"PointerDeref" .PointerDeref
							"PointerRef" .PointerRef
							"IsCustomElementEncoder" .Element.IsCustomElementEncoder
							"CustomElementEncoder" .Element.CustomElementEncoder
							"IsStruct" .Element.IsStruct
							"IsBasicType" .Element.IsBasicType
							"Element" .Element.Element
							"Field" .Element.Field
			}}
			{{else}}
		
				{{template "binarySizeScalarElement" dict
							"Var" (printf "s.%s" .FieldName)
							"FieldName" .FieldName
							"ElementType" .ElementType
							"TypeName" .TypeName
							"IsPointer" false
							"PointerDeref" .PointerDeref
							"PointerRef" .PointerRef
							"IsCustomElementEncoder" .IsCustomElementEncoder
							"CustomElementEncoder" .IsCustomElementEncoder
							"IsStruct" .IsStruct
							"IsBasicType" .IsBasicType
							"Element" .Element
							"Field" .Field
			}}
		{{end}}
		

	{{else if .IsStruct}}
			bs, err := binarySize({{.Var}})
			if err != nil {
				return 0, err
			}
					size += 2 + bs

	{{else}}
			// {{.Var}} ({{.}}) - custom type
			// VarVar {{.Var}}
			{{if or .Element .HasElement }}
				// Element: {{.Element.ElementType}}
				{{template "binarySizeScalarElement" dict
								"Var" (printf "s.%s" .FieldName)
								"FieldName" .FieldName
								"ElementType" .Element.TypeName
								"IsPointer" .Element.IsPointer
								"PointerDeref" .Element.PointerDeref
								"PointerRef" .Element.PointerRef
								"IsCustomElementEncoder" .Element.IsCustomElementEncoder
								"CustomElementEncoder" .Element.CustomElementEncoder
								"IsStruct" .Element.IsStruct
								"IsBasicType" .Element.IsBasicType
								"Element" .Element.Element
								"Field" .Element.Field
				}}
			{{ else   }}
				// Element: No Element
					_s, err := binarySize({{.Var}})
					if err != nil {
						panic(err)
					}
						size += _s
				
				{{end}}
			{{end}}
	{{end}}


///////////////////////////////////
//////////////
{{define "binarySizeSlice"}}
{{if .IsCustomElementEncoder }}
	{{template "binarySizeElement" dict "Var"  (printf "s.%s" .Field.Name) "Shape" . }}

{{else if and .IsSlice (not .IsFixedArray) }}
	// Slice of {{.Field.Name}}: []{{.Field.Name}}
	size += 2 // for slice length
	
		for _, item := range {{.PointerDeref}}(s.{{.Field.Name}}) {
			_ = item
			{{template "binarySizeElement" dict "Var" "item" "Shape" .Element}}
		}
{{else if .IsFixedArray}}
// Fixed array of length {{.IsFixedArray}}: [{{.FixedArrayLength}}]{{.Field.Name}}
	for _, item := range  {{.PointerDeref}}(s.{{.Field.Name}}) {
		_ = item
		{{template "binarySizeElement" dict "Var" "item" "Shape" .Element}}
	}
{{else if .IsPointer }}
	{{template "binarySizeSlice" .Element}}
{{else}}
	// Direct encoding
	d, _ := binarySize(s.{{.Field.Name}})
	buf = appendBytes(buf, d)
{{end}}
{{end}}


{{define "binarySizeElement"}}
{{if .Shape }}
{{if .Shape.IsCustomElementEncoder}}
// Var {{.Var}}
		_s, err := {{.Shape.CustomElementEncoder}}.BinarySize({{.Shape.PointerDeref}}{{.Var}}, s)
				if err != nil {
					panic(fmt.Sprintf("failed to calculate binary size for custom encoder {{.Var}}: %v", err))
				}
				size += 2 + _s
		
{{else if and .Shape.IsSlice (not .Shape.IsFixedArray) }}
		{{ if .Shape.IsPointerSlice}}
			{	if {{.Var}} == nil {
					goto SKIP{{.Field.Name}}
				}
			}
		{{end}}
		size += 2 // for length prefix
		// ElementIsSlice: {{ .Shape.IsSlice}}
		for _, item := range {{.Shape.PointerDeref}}({{.Var}}) {

			{{template "binarySizeElement" dict "Var" "item" "Index" .Shape.Index "Shape" .Shape.Element}}
		}
{{else if .Shape.IsFixedArray}}

			for i{{.Index}} := 0; i{{.Index}}  < {{.Shape.FixedArrayLength}}; i{{.Index}} ++ {
				{{template "binarySizeElement" dict "Var" (printf "%s[i%d]" .Var .Index) "Index" .Shape.Index "Shape" .Shape.Element}}
			}
{{else}}
			// NONSLICE:
			// IsBasice {{ .Shape.IsBasicType}}
			// ElementType {{ .Shape.ElementType }}
			// Element {{ .Shape.Element }}
			// Element {{ .Shape.TypeName }}
					{{template "binarySizeScalarElement" dict
						"Var" .Var
						"FieldName" .Shape.Field.Name
						"TypeName" .Shape.TypeName
						"ElementType" .Shape.ElementType
						"IsPointer" .Shape.IsPointer
						"PointerDeref" .Shape.PointerDeref
						"PointerRef" .Shape.PointerRef
						"IsCustomElementEncoder" .Shape.IsCustomElementEncoder
						"CustomElementEncoder" .Shape.CustomElementEncoder
						"IsStruct" .Shape.IsStruct
						"IsBasicType" .Shape.IsBasicType
						"Element" .Shape.Element
						"Field" .Shape.Field
					}}
{{end}}
{{else }}
// No Shape
// Field: {{.Field.Name}}
// Var: {{.Var}}
// Element: {{.Element}}
				_s, err := binarySize({{.Var}})
				if err != nil {
					panic(fmt.Sprintf("failed to calculate binary size for custom encoder {{.Var}}: %v", err))
				}
				size += 2 + _s
{{end}}
{{end}}

`