package templates

// Complete template with all necessary functions
const BinarySizeFunctionTemplate = `// Code generated by bingen. DO NOT EDIT.

// BinarySizes {{.Name}} to binary format
{{define "binarySize"}}
func (s {{.Name}}) BinarySize() (int, error) {
	size := 0
	{{range .Fields}}
		{{if not .ShouldIgnore}}

		{{if or .IsPointer .IsPointerSlice}}
		{
			size++
			if s.{{.Name}} == nil {
				goto SKIP{{.Name}}
			}
		}
		{{end}}
		
		{
		{{if .IsCustomFieldEncoder}}
			_size, err := {{.CustomFieldEncoder}}.BinarySize({{.PointerDeref}}s.{{.Name}})
				if err != nil {
						return 0, fmt.Errorf("failed to calculate binary size for custom encoder {{.Name}}: %v", err)
				}
				size += 2 + _size
		
		{{else if .IsCustomElementEncoder}}
				_size, err := {{.CustomElementEncoder}}.BinarySize({{.PointerDeref}}s.{{.Name}})
				if err != nil {
					return 0, fmt.Errorf("failed to calculate binary size for custom encoder {{.Name}}: %v", err)
				}
				size += 2 + _size
		{{ else if .Element.IsSlice  }}
				// {{.Name}} ({{.BinaryTag}}) - slice
				// ElementType: {{.Element.TypeName}}
				// Type: {{ .Element.TypeName }}
				// CustomType: {{ .Element.CustomTypeName }}
				// IsCustomEncoder: {{ .IsCustomElementEncoder }}

				{{template "binarySizeSlice" .Element }}

		{{ else if or .IsPointer .IsPointerSlice }}
					// {{.Name}} ({{.BinaryTag}}) - Pointer
					// ElementType: {{.Element.ElementType}}
					// Type: {{ .Element.TypeName }}
					// ActualType: {{ .ActualType }}
					// BasicType: {{ .Element.IsBasicType }}
			
					// ElementType: {{ .Element.TypeName }}

					{{template "binarySizeScalarElement"  dict
					"Var" (printf "s.%s" .Name)
					"FieldName" .Name
					"ElementType" .ElementType
					"IsPointer" .IsPointer
					"PointerDeref" .PointerDeref
					"IsCustomElementEncoder" .IsCustomElementEncoder
					"CustomElementEncoder" .CustomElementEncoder
					"IsStruct" .IsStruct
					"IsBasicType" .IsBasicType
					"Element" .Element
					"Field" .
					}}

		{{else}}
		// IsCustomElementEncoder: {{.IsCustomElementEncoder}}
		// IsCustomElementEncoder: {{.Element.IsCustomElementEncoder}}
					{{template "binarySizeScalarElement" dict
					"Var" (printf "s.%s" .Name)
					"FieldName" .Name
					"ElementType" .Element.ElementType
					"IsPointer" .Element.IsPointer
					"PointerDeref" .Element.PointerDeref
					"IsCustomElementEncoder" .Element.IsCustomElementEncoder
					"CustomElementEncoder" .Element.CustomElementEncoder
					"IsStruct" .Element.IsStruct
					"IsBasicType" .Element.IsBasicType
					"Element" .Element.Element
					"Field" .Element.Field
				}}
		{{end}}
		}
		
		{{if .IsPointer}}
			SKIP{{.Name}}:
		{{end}}
		{{end}}
	{{end}}

	return size, nil
}
{{end}}
`