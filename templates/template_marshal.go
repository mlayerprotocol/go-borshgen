package templates

// Complete template with all necessary functions
const MarshalTemplate = `// Code generated by bingen. DO NOT EDIT.

{{define "marshalScalarElement"}}
	
	{{if .IsCustomElementEncoder}}
		data, err := {{.CustomElementEncoder}}.MarshalBinary(({{.PointerDeref}}{{.Var}}), s)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal {{.Field.Name}}: %v", err)
		}
		buf = appendBytes(buf, data)
	{{ else if .IsSlice  }}
				// {{.Name}} ({{.BinaryTag}}) - slice
				// ElementType: {{.ElementType}}
				// Type: {{ .TypeName }}
				{{template "marshalSlice" . }}
	{{else if .IsBasicType}}
					// BASICTYPE: {{ .IsBasicType }}
					// ELNTYPE: {{ .ElementType}}
					
					{{if eq .ElementType "string"}}
					str := {{.PointerDeref}}{{.Var}}
					if len(str) > MaxStringLen {
						return nil, fmt.Errorf("{{.FieldName}} too long: %d bytes", len(str))
					}
					buf = appendBytes(buf, []byte(str))

					{{else if eq .ElementType "[]byte"}}
					data := {{.PointerDeref}}{{.Var}}
					if len(data) > MaxSliceLen {
						return nil, fmt.Errorf("{{.FieldName}} too long: %d bytes", len(data))
					}
					buf = appendBytes(buf, data)

					{{else if or (eq .ElementType "int64") (eq .ElementType "uint64") (eq .ElementType "int")}}
					buf = appendUint64(buf, uint64({{.PointerDeref}}{{.Var}}))

					{{else if or (eq .ElementType "int32") (eq .ElementType "uint32")}}
					buf = appendUint32(buf, uint32({{.PointerDeref}}{{.Var}}))

					{{else if or (eq .ElementType "int16") (eq .ElementType "uint16")}}
					buf = appendUint16(buf, uint16({{.PointerDeref}}{{.Var}}))

					{{else if or (eq .ElementType "int8") (eq .ElementType "uint8") (eq .ElementType "byte")}}
					buf = append(buf, byte({{.PointerDeref}}{{.Var}}))

					{{else if eq .ElementType "float32"}}
					buf = appendUint32(buf, math.Float32bits({{.PointerDeref}}{{.Var}}))

					{{else if eq .ElementType "float64"}}
					buf = appendUint64(buf, math.Float64bits({{.PointerDeref}}{{.Var}}))

					{{else if eq .ElementType "bool"}}
					if {{.PointerDeref}}{{.Var}} {
						buf = append(buf, 1)
					} else {
						buf = append(buf, 0)
					}
					{{end}}
	
	

	{{else if .IsStruct}}
					nestedData, err := marshalValue({{.Var}})
					if err != nil {
						return nil, fmt.Errorf("failed to marshal {{.FieldName}}: %v", err)
					}
					buf = appendBytes(buf, nestedData)


	{{else}}
			// {{.Var}} ({{.}}) - custom type
			{{if or .Element .HasElement }}
				// Element: {{.Element.ElementType}}
				{{template "marshalScalarElement" dict
								"Var" (printf "s.%s" .FieldName)
								"FieldName" .FieldName
								"TypeName" .Element.TypeName
								"ElementType" .Element.ElementType
								"IsPointer" .Element.IsPointer
								"PointerRef" .Element.PointerRef
								"PointerDeref" .Element.PointerDeref
								"IsCustomElementEncoder" .Element.IsCustomElementEncoder
								"CustomElementEncoder" .Element.CustomElementEncoder
								"IsStruct" .Element.IsStruct
								"IsBasicType" .Element.IsBasicType
								"Element" .Element.Element
								"Field" .Element.Field
				}}
			{{ else   }}
				// Element: No Element
					data, err := marshalValue({{.PointerDeref}}{{.Var}})
					if err != nil {
						return nil, fmt.Errorf("failed to marshal custom type {{.Name}}: %v", err)
					}
					buf = appendBytes(buf, data)
					{{end}}
					
			
				{{end}}
	{{end}}


///////////////////////////////////
//////////////
{{define "marshalSlice"}}
{{if .IsCustomElementEncoder }}
	data, err := {{.CustomElementEncoder}}.MarshalBinary(({{.PointerDeref}}s.{{.Field.Name}}), s)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal {{.Field.Name}}: %v", err)
		}
		buf = appendBytes(buf, data)

{{else if and .IsSlice (not .IsFixedArray) }}
	// Slice of {{.Field.Name}}: []{{.Field.Name}}
	buf = appendUint16(buf, uint16(len({{.PointerDeref}}(s.{{.Field.Name}}))))
		for _, item := range {{.PointerDeref}}(s.{{.Field.Name}}) {
			{{template "marshalElement" dict "Var" "item" "Shape" .Element}}
		}
{{else if .IsFixedArray}}
	// Fixed array of length {{.IsFixedArray}}: [{{.FixedArrayLength}}]{{.Field.Name}}
	for i := 0; i < {{.FixedArrayLength}}; i++ {
		{{template "marshalElement" dict "Var" (printf "s.%s[i]" .Field.Name) "Shape" .Element}}
	}
{{else if .IsPointer }}
	{{template "marshalSlice" .Element}}
{{else}}
	// Direct encoding
	d, _ := marshalValue(s.{{.Field.Name}})
	buf = appendBytes(buf, d)
{{end}}
{{end}}


{{define "marshalElement"}}
{{if .Shape }}
{{if .Shape.IsCustomElementEncoder}}
		//{{ .Field }}
		data, err := {{.Shape.CustomElementEncoder}}.MarshalBinary(({{.Shape.PointerDeref}}{{.Var}}), s)
		if err != nil {
			return nil, fmt.Errorf("failed to marshal {{.Shape.Field.Name}}: %v", err)
		}
		buf = appendBytes(buf, data)
{{else if and .Shape.IsSlice (not .Shape.IsFixedArray) }}
		// ElementIsSlice: {{ .Shape.IsSlice}}
		buf = appendUint16(buf, uint16(len({{.Shape.PointerDeref}}({{.Var}}))))
		for _, inner := range {{.Shape.PointerDeref}}({{.Var}}) {
			{{template "marshalElement" dict "Var" "inner" "Index" .Shape.Index "Shape"  .Shape.Element}}
		}
{{else if .Shape.IsFixedArray}}
	for j{{.Index}} := 0; j{{.Index}} < {{.Shape.FixedArrayLength}}; j{{.Index}}++ {
		{{template "marshalElement" dict "Var" (printf "%s[j%d]" .Var .Index) "Index" .Shape.Index "Shape" .Shape.Element}}
	}
{{else}}
			// NONSLICE:
			// IsBasice {{ .Shape.IsBasicType}}
			// ElementType {{ .Shape.ElementType }}
			// Element {{ .Shape.Element }}
					{{template "marshalScalarElement" dict
						"Var" .Var
						"FieldName" .Shape.Field.Name
						"ElementType" .Shape.ElementType
						"PointerRef" .Shape.PointerRef
						"TypeName" .Shape.TypeName
						"IsPointer" .Shape.IsPointer
						"PointerDeref" .Shape.PointerDeref
						"IsCustomElementEncoder" .Shape.IsCustomElementEncoder
						"CustomElementEncoder" .Shape.CustomElementEncoder
						"IsStruct" .Shape.IsStruct
						"IsBasicType" .Shape.IsBasicType
						"Element" .Shape.Element
						"Field" .Shape.Field
					}}
{{end}}
{{else }}
// No Shape
// Field: {{.Field.Name}}
// Var: {{.Var}}
// Element: {{.Element}}
		data, err := marshalValue({{.Var}})
		if err != nil {
			return nil, fmt.Errorf("failed to marshal  {{.Var}}: %v", err)
		}
		buf = appendBytes(buf, data)
{{end}}
{{end}}

`