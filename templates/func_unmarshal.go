package templates

// Complete template with all necessary functions
const UnmarshalBinaryTemplate = `// Code generated by bingen. DO NOT EDIT.


// UnarshalBinary unmarshals binary data to {{.Name}}
{{define "unmarshalBinary"}}
func (s *{{.Name}}) UnmarshalBinary(data []byte) (error) {
	// FIELDS: {{.Name}}
	offset := 0
    var err error
    {{range .Fields}}
		{{if not .ShouldIgnore}}
		
		
		
		{{ if  or .IsPointer .IsPointerSlice}}
			{	ptr := data[offset]
				if int(ptr) == 0 {
					s.{{.Name }} = nil
					offset++
					goto SKIP{{.Name}}
				} 
			}
				offset++
					
		{{ end }}
	
		{

		{{if .IsCustomFieldEncoder}}
			
				var itemData []byte
				itemData, offset, err = getBytes(data, offset)
				if _v, err := {{.CustomFieldEncoder}}.UnmarshalBinary(itemData); err != nil {
					return fmt.Errorf("failed to unmarshal custom field encoder slice {{.Name}}]: %v", err)
				} else {
				 	_m := (_v).({{ .Element.TypeName}})
					s.{{.Name}} = {{.PointerRef}}_m
				}
					
		{{else if .IsCustomElementEncoder}}
			var itemData []byte
			itemData, offset, err = getBytes(data, offset)
			if _v, err := {{.CustomElementEncoder}}.UnmarshalBinary(itemData); err != nil {
				return fmt.Errorf("failed to unmarshal custom element encoder slice {{.Name}}]: %v", err)
			} else {
				// _m := (_v).({{ .Element.TypeName}})
				// s.{{.Name}} = {{.PointerRef}}_m
			}
		{{ else if .Element.IsSlice  }}
				// {{.Name}} ({{.BinaryTag}}) - slice
				// ElementType: {{.Element.ElementType}}
				// Type: {{ .Element.TypeName }}
				// CustomType: {{ .Element.CustomTypeName }}
				// IsCustomEncoder: {{ .IsCustomElementEncoder }}
				{{template "unmarshalSlice" .Element }}
				
				

		{{ else if or .IsPointer .IsPointerSlice }}
					// {{.Name}} ({{.BinaryTag}}) - Pointer
					// ElementType: {{.Element.ElementType}}
					// Type: {{ .Element.TypeName }}
					// ActualType: {{ .ActualType }}
					// BasicType: {{ .Element.IsBasicType }}
			
					// ElementType: {{ .Element.TypeName }}


					{{template "unmarshalScalarElement"  dict
					"Var" (printf "s.%s" .Name)
					"FieldName" .Name
					"ElementType" .ElementType
					"TypeName" .TypeName
					"IsPointer" .IsPointer
					"PointerDeref" .PointerDeref
					"PointerRef" .PointerRef
					"IsCustomElementEncoder" .IsCustomElementEncoder
					"CustomElementEncoder" .CustomElementEncoder
					"IsStruct" .IsStruct
					"IsBasicType" .IsBasicType
					"Element" .Element
					"Field" .
					}}
			
	
		{{else}}
		// IsCustomElementEncoder: {{.IsCustomElementEncoder}}
		// IsCustomElementEncoder: {{.Element.IsCustomElementEncoder}}
					{{template "unmarshalScalarElement" dict
					"Var" (printf "s.%s" .Name)
					"FieldName" .Name
					"ElementType" .Element.ElementType
					"TypeName" .Element.TypeName
					"PointerRef" .Element.PointerRef
					"IsPointer" .Element.IsPointer
					"PointerDeref" .Element.PointerDeref
					"IsCustomElementEncoder" .Element.IsCustomElementEncoder
					"CustomElementEncoder" .Element.CustomElementEncoder
					"IsStruct" .Element.IsStruct
					"IsBasicType" .Element.IsBasicType
					"Element" .Element.Element
					"Field" .Element.Field
				}}
			{{end}}
				
			
		}
			{{if .IsPointer}}
					SKIP{{.Name}}:
				{{end}}
		{{end}}
	{{end}}
	return err

}
{{end}}
`